'''import cv2
import numpy as np
import mediapipe.python.solutions.hands as mp_hand
import mediapipe.python.solutions.drawing_utils as drawing
import mediapipe.python.solutions.drawing_styles as drawing_style

# Initialize MediaPipe Hands.
hands = mp_hand.Hands(
    static_image_mode=False,
    max_num_hands=2,
    min_detection_confidence=0.3)

# Open video capture.
vid = cv2.VideoCapture(0)
if not vid.isOpened():
    print("Error: Could not open video.")
    exit()

# Color options.
colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]
ci = 0
canvas = None

while True:
    ret, frame = vid.read()
    if not ret:
        print("Error: Could not read frame.")
        break

    frame = cv2.cvtColor(cv2.flip(frame, 1), cv2.COLOR_BGR2RGB)
    
    if canvas is None:
        canvas = np.zeros_like(frame)

    result = hands.process(frame)

    if result.multi_hand_landmarks:
        for i in result.multi_hand_landmarks:
            drawing.draw_landmarks(image=frame, landmark_list=i, connections=mp_hand.HAND_CONNECTIONS,
                                   landmark_drawing_spec=drawing_style.get_default_hand_landmarks_style(),
                                   connection_drawing_spec=drawing_style.get_default_hand_connections_style())

            index = i.landmark[mp_hand.HandLandmark.INDEX_FINGER_TIP]
            x, y = int(index.x * frame.shape[1]), int(index.y * frame.shape[0])

            if y < 50:
                ci = x // (frame.shape[1] // len(colors))
            else:
                cv2.circle(canvas, (x, y), 5, colors[ci], -1)

        frame = cv2.add(frame, canvas)
        cv2.rectangle(frame, (0, 0), (frame.shape[1], 50), (255, 255, 255), -1)
        for i, color in enumerate(colors):
            cv2.circle(frame, ((i * 2 + 1) * frame.shape[1] // (len(colors)*2), 25), 20, color, -1)

    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
    cv2.imshow('frame', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

vid.release()
cv2.destroyAllWindows()'''
import cv2
import numpy as np
import mediapipe.python.solutions.hands as mp_hand
import mediapipe.python.solutions.drawing_utils as drawing
import mediapipe.python.solutions.drawing_styles as drawing_style

# Initialize MediaPipe Hands.
hands = mp_hand.Hands(
    static_image_mode=False,
    max_num_hands=2,
    min_detection_confidence=0.4)

# Open video capture.
vid = cv2.VideoCapture(0)
if not vid.isOpened():
    print("Error: Could not open video.")
    exit()

# Color options.
colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]
ci = 0
canvas = None
prev_pos = None

while True:
    ret, frame = vid.read()
    if not ret:
        print("Error: Could not read frame.")
        break

    frame = cv2.cvtColor(cv2.flip(frame, 1), cv2.COLOR_BGR2RGB)
    
    if canvas is None:
        canvas = np.zeros_like(frame)

    result = hands.process(frame)

    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            drawing.draw_landmarks(image=frame, landmark_list=hand_landmarks, connections=mp_hand.HAND_CONNECTIONS,
                                   landmark_drawing_spec=drawing_style.get_default_hand_landmarks_style(),
                                   connection_drawing_spec=drawing_style.get_default_hand_connections_style())

            index_tip = hand_landmarks.landmark[mp_hand.HandLandmark.INDEX_FINGER_TIP]
            x, y = int(index_tip.x * frame.shape[1]), int(index_tip.y * frame.shape[0])

            if y < 50:
                ci = x // (frame.shape[1] // len(colors))
                prev_pos = None
            else:
                if prev_pos is not None:
                    cv2.line(canvas, prev_pos, (x, y), colors[ci], 5)
                prev_pos = (x, y)

        frame = cv2.add(frame, canvas)
        cv2.rectangle(frame, (0, 0), (frame.shape[1], 50), (255, 255, 255), -1)
        for i, color in enumerate(colors):
            cv2.circle(frame, ((i * 2 + 1) * frame.shape[1] // (len(colors)*2), 25), 20, color, -1)
    else:
        prev_pos = None

    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
    cv2.imshow('frame', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

vid.release()
cv2.destroyAllWindows()

